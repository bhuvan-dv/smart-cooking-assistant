# Akka Reference Configuration
akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  log-filter = "akka.event.slf4j.Slf4jLogFilter"

  actor {
    # FQCN of the ActorRefProvider to be used; the below is the built-in default,
    # another one is akka.remote.RemoteActorRefProvider in the akka-remote artifact.
    provider = "local"

    # The guardian "/user" will use this class to obtain its supervisorStrategy.
    # It needs to be a subclass of akka.actor.SupervisorStrategyConfigurator.
    # The default strategy will be used if the class is not specified or is not
    # a subclass of akka.actor.SupervisorStrategyConfigurator.
    guardian-supervisor-strategy = "akka.actor.DefaultSupervisorStrategy"

    # Timeout for ActorSystem.actorOf
    creation-timeout = 20s

    # Serializers and their bindings
    serializers {
      java = "akka.serialization.JavaSerializer"
      bytes = "akka.serialization.ByteArraySerializer"
    }

    serialization-bindings {
      "[B" = bytes
      "java.io.Serializable" = java
    }

    # Configuration items for the default dispatcher
    default-dispatcher {
      # Must be one of the following
      # Dispatcher, PinnedDispatcher, or a FQCN to a class inheriting
      # MessageDispatcherConfigurator with a public constructor with
      # both com.typesafe.config.Config parameter and
      # akka.dispatch.DispatcherPrerequisites parameters.
      type = "Dispatcher"

      # Which kind of ExecutorService to use for this dispatcher
      # "fork-join-executor" is the default
      executor = "fork-join-executor"

      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 8

        # The parallelism factor is used to determine thread pool size using the
        # following formula: ceil(available processors * factor). Resulting size
        # is then bounded by the parallelism-min and parallelism-max values.
        parallelism-factor = 3.0

        # Max number of threads to cap factor-based parallelism number to
        parallelism-max = 64

        # Setting to "FIFO" to use queue like peeking mode which "poll" or "LIFO" to use stack-like peeking mode
        task-peeking-mode = "FIFO"
      }

      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 5
    }
  }

  # Cluster related settings
  cluster {
    # Initial contact points of the cluster.
    # The nodes to join automatically at startup.
    # Comma separated full URIs defined by a string on the form of
    # "akka://system@hostname:port"
    seed-nodes = []

    # How long to wait for one of the seed nodes to reply to initial join request
    seed-node-timeout = 5s

    # If a join request fails it will be retried after this period
    retry-unsuccessful-join-after = 10s

    # How long to wait for the initial join procedure to complete
    # (until all seed nodes have been contacted and joined)
    join-timeout = 60s

    # After this timeout the joining process will be retried
    # if no reply is received from the seed nodes
    handshake-timeout = 60s

    # Time after which the leader automatically moves the joining nodes to 'Up'
    auto-down-unreachable-after = off

    # The roles of this member. List of strings, e.g. roles = ["A", "B"].
    # The roles are part of the membership information and can be used by
    # routers or other services to distribute work to certain member types.
    roles = []

    # Run the coordinated shutdown from phase 'cluster-shutdown' when the cluster
    # is told to shutdown. This will terminate the ActorSystem when the cluster
    # extension is shutdown.
    run-coordinated-shutdown-when-down = yes

    # Minimum number of members before the leader changes member status
    # of 'Joining' members to 'Up'. Typically used together with
    # 'Cluster.registerOnMemberUp' to defer some action, such as starting
    # actors, until the cluster has reached a certain size.
    min-nr-of-members = 1
  }

  # Serialization settings
  serialization.jackson {
    # Configuration of the ObjectMapper for Akka serialization
    serialization-features {
      # Whether to use the default pretty printer
      INDENT_OUTPUT = off

      # Other Jackson features can be configured here
    }

    # Modules to enable by default
    modules += "com.fasterxml.jackson.module.scala.DefaultScalaModule"
  }
}

# Application specific configuration
cooking {
  openai {
    # Replace with your actual OpenAI API key
    api-key = "your-api-key"

    # Default model to use
    model = "gpt-3.5-turbo"

    # Temperature parameter for creativity (0.0 to 2.0)
    temperature = 0.7

    # Maximum tokens to generate
    max-tokens = 1000

    # Timeout for API calls
    timeout = 30s
  }

  # Cluster node roles configuration
  node {
    # Default roles for nodes
    roles = ["node1", "node2"]

    # Actor system name
    system-name = "SmartCookingSystem"
  }
}